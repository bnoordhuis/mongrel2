.\"     Title: zmq_tcp
.\"    Author: 
.\" Generator: DocBook XSL Stylesheets v1.73.2 <http://docbook.sf.net/>
.\"      Date: 08/25/2010
.\"    Manual: 0MQ Manual
.\"    Source: 0MQ 2.0.8
.\"
.TH "ZMQ_TCP" "7" "08/25/2010" "0MQ 2\&.0\&.8" "0MQ Manual"
.\" disable hyphenation
.nh
.\" disable justification (adjust text to left margin only)
.ad l
.SH "NAME"
zmq_tcp \- 0MQ unicast transport using TCP
.SH "SYNOPSIS"
TCP is an ubiquitous, reliable, unicast transport\&. When connecting distributed applications over a network with 0MQ, using the TCP transport will likely be your first choice\&.
.sp
.SH "ADDRESSING"
A 0MQ address string consists of two parts as follows: \fItransport\fR://\fIendpoint\fR\&. The \fItransport\fR part specifies the underlying transport protocol to use, and for the TCP transport shall be set to tcp\&. The meaning of the \fIendpoint\fR part for the TCP transport is defined below\&.
.sp
.SS "Assigning a local address to a socket"
When assigning a local address to a socket using \fIzmq_bind()\fR with the \fItcp\fR transport, the \fIendpoint\fR shall be interpreted as an \fIinterface\fR followed by a colon and the TCP port number to use\&.
.sp
An \fIinterface\fR may be specified by either of the following:
.sp
.sp
.RS 4
\h'-04'\(bu\h'+03'The wildcard
*, meaning all available interfaces\&.
.RE
.sp
.RS 4
\h'-04'\(bu\h'+03'The primary IPv4 address assigned to the interface, in its numeric representation\&.
.RE
.sp
.RS 4
\h'-04'\(bu\h'+03'The interface name as defined by the operating system\&.
.RE
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
Note
Interface names are not standardised in any way and should be assumed to be arbitrary and platform dependent\&. On Win32 platforms no short interface names exist, thus only the primary IPv4 address may be used to specify an \fIinterface\fR\&.
.sp
.SS "Connecting a socket"
When connecting a socket to a peer address using \fIzmq_connect()\fR with the \fItcp\fR transport, the \fIendpoint\fR shall be interpreted as a \fIpeer address\fR followed by a colon and the TCP port number to use\&.
.sp
A \fIpeer address\fR may be specified by either of the following:
.sp
.sp
.RS 4
\h'-04'\(bu\h'+03'The DNS name of the peer\&.
.RE
.sp
.RS 4
\h'-04'\(bu\h'+03'The IPv4 address of the peer, in its numeric representation\&.
.RE
.SH "WIRE FORMAT"
0MQ messages are transmitted over TCP in frames consisting of an encoded \fIpayload length\fR, followed by a \fIflags\fR field and the message body\&. The \fIpayload length\fR is defined as the combined length in octets of the message body and the \fIflags\fR field\&.
.sp
For frames with a \fIpayload length\fR not exceeding 254 octets, the \fIpayload length\fR shall be encoded as a single octet\&. The minimum valid \fIpayload length\fR of a frame is 1 octet, thus a \fIpayload length\fR of 0 octets is invalid and such frames SHOULD be ignored\&.
.sp
For frames with a \fIpayload length\fR exceeding 254 octets, the \fIpayload length\fR shall be encoded as a single octet with the value 255 followed by the \fIpayload length\fR represented as a 64\-bit unsigned integer in network byte order\&.
.sp
The \fIflags\fR field consists of a single octet containing various control flags:
.sp
Bit 0 (MORE): \fIMore message parts to follow\fR\&. A value of 0 indicates that there are no more message parts to follow; or that the message being sent is not a multi\-part message\&. A value of 1 indicates that the message being sent is a multi\-part message and more message parts are to follow\&.
.sp
Bits 1\-7: \fIReserved\fR\&. Bits 1\-7 are reserved for future expansion and MUST be set to zero\&.
.sp
The following ABNF grammar represents a single \fIframe\fR:
.sp
.sp
.RS 4
.nf
    frame           = (length flags data)
    length          = OCTET / (escape 8OCTET)
    flags           = OCTET
    escape          = %xFF
    data            = *OCTET
.fi
.RE
The following diagram illustrates the layout of a frame with a \fIpayload length\fR not exceeding 254 octets:
.sp
.sp
.RS 4
.nf
0                   1                   2                   3
0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
+\-+\-+\-+\-+\-+\-+\-+\-+\-+\-+\-+\-+\-+\-+\-+\-+\-+\-+\-+\-+\-+\-+\-+\-+\-+\-+\-+\-+\-+\-+\-+\-+
| Payload length|     Flags     |       Message body        \&.\&.\&. |
+\-+\-+\-+\-+\-+\-+\-+\-+\-+\-+\-+\-+\-+\-+\-+\-+\-+\-+\-+\-+\-+\-+\-+\-+\-+\-+\-+\-+\-+\-+\-+\-+
| Message body \&.\&.\&.
+\-+\-+\-+\-+\-+\-+\- \&.\&.\&.
.fi
.RE
The following diagram illustrates the layout of a frame with a \fIpayload length\fR exceeding 254 octets:
.sp
.sp
.RS 4
.nf
0                   1                   2                   3
0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
+\-+\-+\-+\-+\-+\-+\-+\-+\-+\-+\-+\-+\-+\-+\-+\-+\-+\-+\-+\-+\-+\-+\-+\-+\-+\-+\-+\-+\-+\-+\-+\-+
|     0xff      |               Payload length              \&.\&.\&. |
+\-+\-+\-+\-+\-+\-+\-+\-+\-+\-+\-+\-+\-+\-+\-+\-+\-+\-+\-+\-+\-+\-+\-+\-+\-+\-+\-+\-+\-+\-+\-+\-+
|                       Payload length                      \&.\&.\&. |
+\-+\-+\-+\-+\-+\-+\-+\-+\-+\-+\-+\-+\-+\-+\-+\-+\-+\-+\-+\-+\-+\-+\-+\-+\-+\-+\-+\-+\-+\-+\-+\-+
| Payload length|     Flags     |        Message body       \&.\&.\&. |
+\-+\-+\-+\-+\-+\-+\-+\-+\-+\-+\-+\-+\-+\-+\-+\-+\-+\-+\-+\-+\-+\-+\-+\-+\-+\-+\-+\-+\-+\-+\-+\-+
|  Message body \&.\&.\&.
+\-+\-+\-+\-+\-+\-+\-+ \&.\&.\&.
.fi
.RE
.SH "EXAMPLES"
.PP
\fBAssigning a local address to a socket\fR. 
.sp
.RS 4
.nf
/* TCP port 5555 on all available interfaces */
rc = zmq_bind(socket, "tcp://*:5555");
assert (rc == 0);
/* TCP port 5555 on the local loopback interface on all platforms */
rc = zmq_bind(socket, "tcp://127\&.0\&.0\&.1:5555");
assert (rc == 0);
/* TCP port 5555 on the first ethernet network interface on Linux */
rc = zmq_bind(socket, "tcp://eth0:5555");
assert (rc == 0);
.fi
.RE
.PP
\fBConnecting a socket\fR. 
.sp
.RS 4
.nf
/* Connecting using an IP address */
rc = zmq_connect(socket, "tcp://192\&.168\&.1\&.1:5555");
assert (rc == 0);
/* Connecting using a DNS name */
rc = zmq_connect(socket, "tcp://server1:5555");
assert (rc == 0);
.fi
.RE
.sp
.SH "SEE ALSO"
\fBzmq_bind\fR(3) \fBzmq_connect\fR(3) \fBzmq_pgm\fR(7) \fBzmq_ipc\fR(7) \fBzmq_inproc\fR(7) \fBzmq\fR(7)
.sp
.SH "AUTHORS"
The 0MQ reference manual was written by Martin Lucina <\fImato@kotelna\&.sk\fR\&[1]>, Martin Sustrik <\fIsustrik@250bpm\&.com\fR\&[2]>, and Pieter Hintjens <\fIph@imatix\&.com\fR\&[3]>\&.
.sp
.SH "RESOURCES"
Main web site: \fIhttp://www\&.zeromq\&.org/\fR
.sp
Report bugs to the 0MQ development mailing list: <\fIzeromq\-dev@lists\&.zeromq\&.org\fR\&[4]>
.sp
.SH "COPYRIGHT"
Copyright (c) 2007\-2010 iMatix Corporation and contributors\&. License LGPLv3+: GNU LGPL 3 or later <\fIhttp://gnu\&.org/licenses/lgpl\&.html\fR>\&. This is free software: you are free to change it and redistribute it\&. There is NO WARRANTY, to the extent permitted by law\&. For details see the files COPYING and COPYING\&.LESSER included with the 0MQ distribution\&.
.sp
.SH "NOTES"
.IP " 1." 4
mato@kotelna.sk
.RS 4
\%mailto:mato@kotelna.sk
.RE
.IP " 2." 4
sustrik@250bpm.com
.RS 4
\%mailto:sustrik@250bpm.com
.RE
.IP " 3." 4
ph@imatix.com
.RS 4
\%mailto:ph@imatix.com
.RE
.IP " 4." 4
zeromq-dev@lists.zeromq.org
.RS 4
\%mailto:zeromq-dev@lists.zeromq.org
.RE
