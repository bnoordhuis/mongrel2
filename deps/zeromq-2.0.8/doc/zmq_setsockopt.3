.\"     Title: zmq_setsockopt
.\"    Author: 
.\" Generator: DocBook XSL Stylesheets v1.73.2 <http://docbook.sf.net/>
.\"      Date: 08/25/2010
.\"    Manual: 0MQ Manual
.\"    Source: 0MQ 2.0.8
.\"
.TH "ZMQ_SETSOCKOPT" "3" "08/25/2010" "0MQ 2\&.0\&.8" "0MQ Manual"
.\" disable hyphenation
.nh
.\" disable justification (adjust text to left margin only)
.ad l
.SH "NAME"
zmq_setsockopt \- set 0MQ socket options
.SH "SYNOPSIS"
\fBint zmq_setsockopt (void \fR\fB\fI*socket\fR\fR\fB, int \fR\fB\fIoption_name\fR\fR\fB, const void \fR\fB\fI*option_value\fR\fR\fB, size_t \fR\fB\fIoption_len\fR\fR\fB);\fR
.sp
.SH "DESCRIPTION"
The \fIzmq_setsockopt()\fR function shall set the option specified by the \fIoption_name\fR argument to the value pointed to by the \fIoption_value\fR argument for the 0MQ socket pointed to by the \fIsocket\fR argument\&. The \fIoption_len\fR argument is the size of the option value in bytes\&.
.sp
The following socket options can be set with the \fIzmq_setsockopt()\fR function:
.sp
.SS "ZMQ_HWM: Set high water mark"
The \fIZMQ_HWM\fR option shall set the high water mark for the specified \fIsocket\fR\&. The high water mark is a hard limit on the maximum number of outstanding messages 0MQ shall queue in memory for any single peer that the specified \fIsocket\fR is communicating with\&.
.sp
If this limit has been reached the socket shall enter an exceptional state and depending on the socket type, 0MQ shall take appropriate action such as blocking or dropping sent messages\&. Refer to the individual socket descriptions in \fBzmq_socket\fR(3) for details on the exact action taken for each socket type\&.
.sp
The default \fIZMQ_HWM\fR value of zero means "no limit"\&.
.sp
.TS
tab(:);
lt lt
lt lt
lt lt
lt lt.
T{
Option value type
.sp
T}:T{
uint64_t
.sp
T}
T{
Option value unit
.sp
T}:T{
messages
.sp
T}
T{
Default value
.sp
T}:T{
0
.sp
T}
T{
Applicable socket types
.sp
T}:T{
all
.sp
T}
.TE
.sp
.SS "ZMQ_SWAP: Set disk offload size"
The \fIZMQ_SWAP\fR option shall set the disk offload (swap) size for the specified \fIsocket\fR\&. A socket which has \fIZMQ_SWAP\fR set to a non\-zero value may exceed its high water mark; in this case outstanding messages shall be offloaded to storage on disk rather than held in memory\&.
.sp
The value of \fIZMQ_SWAP\fR defines the maximum size of the swap space in bytes\&.
.sp
.TS
tab(:);
lt lt
lt lt
lt lt
lt lt.
T{
Option value type
.sp
T}:T{
int64_t
.sp
T}
T{
Option value unit
.sp
T}:T{
bytes
.sp
T}
T{
Default value
.sp
T}:T{
0
.sp
T}
T{
Applicable socket types
.sp
T}:T{
all
.sp
T}
.TE
.sp
.SS "ZMQ_AFFINITY: Set I/O thread affinity"
The \fIZMQ_AFFINITY\fR option shall set the I/O thread affinity for newly created connections on the specified \fIsocket\fR\&.
.sp
Affinity determines which threads from the 0MQ I/O thread pool associated with the socket\(cqs \fIcontext\fR shall handle newly created connections\&. A value of zero specifies no affinity, meaning that work shall be distributed fairly among all 0MQ I/O threads in the thread pool\&. For non\-zero values, the lowest bit corresponds to thread 1, second lowest bit to thread 2 and so on\&. For example, a value of 3 specifies that subsequent connections on \fIsocket\fR shall be handled exclusively by I/O threads 1 and 2\&.
.sp
See also \fBzmq_init\fR(3) for details on allocating the number of I/O threads for a specific \fIcontext\fR\&.
.sp
.TS
tab(:);
lt lt
lt lt
lt lt
lt lt.
T{
Option value type
.sp
T}:T{
uint64_t
.sp
T}
T{
Option value unit
.sp
T}:T{
N/A (bitmap)
.sp
T}
T{
Default value
.sp
T}:T{
0
.sp
T}
T{
Applicable socket types
.sp
T}:T{
N/A
.sp
T}
.TE
.sp
.SS "ZMQ_IDENTITY: Set socket identity"
The \fIZMQ_IDENTITY\fR option shall set the identity of the specified \fIsocket\fR\&. Socket identity determines if existing 0MQ infastructure (\fImessage queues\fR, \fIforwarding devices\fR) shall be identified with a specific application and persist across multiple runs of the application\&.
.sp
If the socket has no identity, each run of an application is completely separate from other runs\&. However, with identity set the socket shall re\-use any existing 0MQ infrastructure configured by the previous run(s)\&. Thus the application may receive messages that were sent in the meantime, \fImessage queue\fR limits shall be shared with previous run(s) and so on\&.
.sp
Identity should be at least one byte and at most 255 bytes long\&. Identities starting with binary zero are reserved for use by 0MQ infrastructure\&.
.sp
.TS
tab(:);
lt lt
lt lt
lt lt
lt lt.
T{
Option value type
.sp
T}:T{
binary data
.sp
T}
T{
Option value unit
.sp
T}:T{
N/A
.sp
T}
T{
Default value
.sp
T}:T{
NULL
.sp
T}
T{
Applicable socket types
.sp
T}:T{
all
.sp
T}
.TE
.sp
.SS "ZMQ_SUBSCRIBE: Establish message filter"
The \fIZMQ_SUBSCRIBE\fR option shall establish a new message filter on a \fIZMQ_SUB\fR socket\&. Newly created \fIZMQ_SUB\fR sockets shall filter out all incoming messages, therefore you should call this option to establish an initial message filter\&.
.sp
An empty \fIoption_value\fR of length zero shall subscribe to all incoming messages\&. A non\-empty \fIoption_value\fR shall subscribe to all messages beginning with the specified prefix\&. Mutiple filters may be attached to a single \fIZMQ_SUB\fR socket, in which case a message shall be accepted if it matches at least one filter\&.
.sp
.TS
tab(:);
lt lt
lt lt
lt lt
lt lt.
T{
Option value type
.sp
T}:T{
binary data
.sp
T}
T{
Option value unit
.sp
T}:T{
N/A
.sp
T}
T{
Default value
.sp
T}:T{
N/A
.sp
T}
T{
Applicable socket types
.sp
T}:T{
ZMQ_SUB
.sp
T}
.TE
.sp
.SS "ZMQ_UNSUBSCRIBE: Remove message filter"
The \fIZMQ_UNSUBSCRIBE\fR option shall remove an existing message filter on a \fIZMQ_SUB\fR socket\&. The filter specified must match an existing filter previously established with the \fIZMQ_SUBSCRIBE\fR option\&. If the socket has several instances of the same filter attached the \fIZMQ_UNSUBSCRIBE\fR option shall remove only one instance, leaving the rest in place and functional\&.
.sp
.TS
tab(:);
lt lt
lt lt
lt lt
lt lt.
T{
Option value type
.sp
T}:T{
binary data
.sp
T}
T{
Option value unit
.sp
T}:T{
N/A
.sp
T}
T{
Default value
.sp
T}:T{
N/A
.sp
T}
T{
Applicable socket types
.sp
T}:T{
ZMQ_SUB
.sp
T}
.TE
.sp
.SS "ZMQ_RATE: Set multicast data rate"
The \fIZMQ_RATE\fR option shall set the maximum send or receive data rate for multicast transports such as \fBzmq_pgm\fR(7) using the specified \fIsocket\fR\&.
.sp
.TS
tab(:);
lt lt
lt lt
lt lt
lt lt.
T{
Option value type
.sp
T}:T{
int64_t
.sp
T}
T{
Option value unit
.sp
T}:T{
kilobits per second
.sp
T}
T{
Default value
.sp
T}:T{
100
.sp
T}
T{
Applicable socket types
.sp
T}:T{
all, when using multicast transports
.sp
T}
.TE
.sp
.SS "ZMQ_RECOVERY_IVL: Set multicast recovery interval"
The \fIZMQ_RECOVERY_IVL\fR option shall set the recovery interval for multicast transports using the specified \fIsocket\fR\&. The recovery interval determines the maximum time in seconds that a receiver can be absent from a multicast group before unrecoverable data loss will occur\&.
.sp
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
Caution
Excersize care when setting large recovery intervals as the data needed for recovery will be held in memory\&. For example, a 1 minute recovery interval at a data rate of 1Gbps requires a 7GB in\-memory buffer\&.
.sp
.TS
tab(:);
lt lt
lt lt
lt lt
lt lt.
T{
Option value type
.sp
T}:T{
int64_t
.sp
T}
T{
Option value unit
.sp
T}:T{
seconds
.sp
T}
T{
Default value
.sp
T}:T{
10
.sp
T}
T{
Applicable socket types
.sp
T}:T{
all, when using multicast transports
.sp
T}
.TE
.sp
.SS "ZMQ_MCAST_LOOP: Control multicast loopback"
The \fIZMQ_MCAST_LOOP\fR option shall control whether data sent via multicast transports using the specified \fIsocket\fR can also be received by the sending host via loopback\&. A value of zero disables the loopback functionality, while the default value of 1 enables the loopback functionality\&. Leaving multicast loopback enabled when it is not required can have a negative impact on performance\&. Where possible, disable \fIZMQ_MCAST_LOOP\fR in production environments\&.
.sp
.TS
tab(:);
lt lt
lt lt
lt lt
lt lt.
T{
Option value type
.sp
T}:T{
int64_t
.sp
T}
T{
Option value unit
.sp
T}:T{
boolean
.sp
T}
T{
Default value
.sp
T}:T{
1
.sp
T}
T{
Applicable socket types
.sp
T}:T{
all, when using multicast transports
.sp
T}
.TE
.sp
.SS "ZMQ_SNDBUF: Set kernel transmit buffer size"
The \fIZMQ_SNDBUF\fR option shall set the underlying kernel transmit buffer size for the \fIsocket\fR to the specified size in bytes\&. A value of zero means leave the OS default unchanged\&. For details please refer to your operating system documentation for the \fISO_SNDBUF\fR socket option\&.
.sp
.TS
tab(:);
lt lt
lt lt
lt lt
lt lt.
T{
Option value type
.sp
T}:T{
uint64_t
.sp
T}
T{
Option value unit
.sp
T}:T{
bytes
.sp
T}
T{
Default value
.sp
T}:T{
0
.sp
T}
T{
Applicable socket types
.sp
T}:T{
all
.sp
T}
.TE
.sp
.SS "ZMQ_RCVBUF: Set kernel receive buffer size"
The \fIZMQ_RCVBUF\fR option shall set the underlying kernel receive buffer size for the \fIsocket\fR to the specified size in bytes\&. A value of zero means leave the OS default unchanged\&. For details refer to your operating system documentation for the \fISO_RCVBUF\fR socket option\&.
.sp
.TS
tab(:);
lt lt
lt lt
lt lt
lt lt.
T{
Option value type
.sp
T}:T{
uint64_t
.sp
T}
T{
Option value unit
.sp
T}:T{
bytes
.sp
T}
T{
Default value
.sp
T}:T{
0
.sp
T}
T{
Applicable socket types
.sp
T}:T{
all
.sp
T}
.TE
.sp
.SH "RETURN VALUE"
The \fIzmq_setsockopt()\fR function shall return zero if successful\&. Otherwise it shall return \-1 and set \fIerrno\fR to one of the values defined below\&.
.sp
.SH "ERRORS"
.PP
\fBEINVAL\fR
.RS 4
The requested option
\fIoption_name\fR
is unknown, or the requested
\fIoption_len\fR
or
\fIoption_value\fR
is invalid\&.
.RE
.PP
\fBETERM\fR
.RS 4
The 0MQ
\fIcontext\fR
associated with the specified
\fIsocket\fR
was terminated\&.
.RE
.PP
\fBEFAULT\fR
.RS 4
The provided
\fIsocket\fR
was not valid (NULL)\&.
.RE
.SH "EXAMPLE"
.PP
\fBSubscribing to messages on a ZMQ_SUB socket\fR. 
.sp
.RS 4
.nf
/* Subscribe to all messages */
rc = zmq_setsockopt (socket, ZMQ_SUBSCRIBE, "", 0);
assert (rc == 0);
/* Subscribe to messages prefixed with "ANIMALS\&.CATS" */
rc = zmq_setsockopt (socket, ZMQ_SUBSCRIBE, "ANIMALS\&.CATS", 12);
.fi
.RE
.PP
\fBSetting I/O thread affinity\fR. 
.sp
.RS 4
.nf
int64_t affinity;
/* Incoming connections on TCP port 5555 shall be handled by I/O thread 1 */
affinity = 1;
rc = zmq_setsockopt (socket, ZMQ_AFFINITY, &affinity, sizeof affinity);
assert (rc);
rc = zmq_bind (socket, "tcp://lo:5555");
assert (rc);
/* Incoming connections on TCP port 5556 shall be handled by I/O thread 2 */
affinity = 2;
rc = zmq_setsockopt (socket, ZMQ_AFFINITY, &affinity, sizeof affinity);
assert (rc);
rc = zmq_bind (socket, "tcp://lo:5556");
assert (rc);
.fi
.RE
.sp
.SH "SEE ALSO"
\fBzmq_getsockopt\fR(3) \fBzmq_socket\fR(3) \fBzmq\fR(7)
.sp
.SH "AUTHORS"
The 0MQ reference manual was written by Martin Lucina <\fImato@kotelna\&.sk\fR\&[1]>, Martin Sustrik <\fIsustrik@250bpm\&.com\fR\&[2]>, and Pieter Hintjens <\fIph@imatix\&.com\fR\&[3]>\&.
.sp
.SH "RESOURCES"
Main web site: \fIhttp://www\&.zeromq\&.org/\fR
.sp
Report bugs to the 0MQ development mailing list: <\fIzeromq\-dev@lists\&.zeromq\&.org\fR\&[4]>
.sp
.SH "COPYRIGHT"
Copyright (c) 2007\-2010 iMatix Corporation and contributors\&. License LGPLv3+: GNU LGPL 3 or later <\fIhttp://gnu\&.org/licenses/lgpl\&.html\fR>\&. This is free software: you are free to change it and redistribute it\&. There is NO WARRANTY, to the extent permitted by law\&. For details see the files COPYING and COPYING\&.LESSER included with the 0MQ distribution\&.
.sp
.SH "NOTES"
.IP " 1." 4
mato@kotelna.sk
.RS 4
\%mailto:mato@kotelna.sk
.RE
.IP " 2." 4
sustrik@250bpm.com
.RS 4
\%mailto:sustrik@250bpm.com
.RE
.IP " 3." 4
ph@imatix.com
.RS 4
\%mailto:ph@imatix.com
.RE
.IP " 4." 4
zeromq-dev@lists.zeromq.org
.RS 4
\%mailto:zeromq-dev@lists.zeromq.org
.RE
